apply from: 'https://raw.githubusercontent.com/sensorberg-dev/gradle-scripts/master/common-def.gradle'
apply from: 'https://raw.githubusercontent.com/sensorberg-dev/gradle-scripts/master/find-version-name.gradle'

apply plugin: 'maven'
apply plugin: 'signing'

allprojects {
	version = findVersionName()
	group = POM_GROUP_ID
}

def findPropertyWithFallback(String key1, String key2, String defaultValue) {
	def found = findProperty(key1, defaultValue)
	if (found == defaultValue) found = findProperty(key2, defaultValue)
	return found
}

afterEvaluate { project ->

	uploadArchives {
		repositories {
			mavenDeployer {
				beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

				pom.groupId = POM_GROUP_ID
				pom.artifactId = POM_ARTIFACT_ID
				pom.version = findVersionName()
				pom.packaging = POM_PACKAGING

				def mavenUrl = findPropertyWithFallback("MAVEN_UPLOAD_URL", "MAVEN_URL", "FOOBAR")
				if (mavenUrl == "FOOBAR") throw new IllegalArgumentException("Missing required parameter MAVEN_URL or MAVEN_UPLOAD_URL")
				repository(url: mavenUrl) {
					def username = findPropertyWithFallback("MAVEN_UPLOAD_USERNAME", "MAVEN_USERNAME", "FOOBAR")
					def password = findPropertyWithFallback("MAVEN_UPLOAD_PASSWORD", "MAVEN_PASSWORD", "FOOBAR")
					authentication(userName: username, password: password)
				}

				def mavenSnapshotUrl = findPropertyWithFallback("MAVEN_UPLOAD_URL_SNAPSHOT", "MAVEN_URL_SNAPSHOT", "FOOBAR")
				if (mavenSnapshotUrl != "FOOBAR") {
					snapshotRepository(url: mavenSnapshotUrl) {
						def username = findPropertyWithFallback("MAVEN_UPLOAD_USERNAME", "MAVEN_USERNAME", "FOOBAR")
						def password = findPropertyWithFallback("MAVEN_UPLOAD_PASSWORD", "MAVEN_PASSWORD", "FOOBAR")
						authentication(userName: username, password: password)
					}
				}

				pom.project {
					name project.findProperty("POM_NAME")
					packaging project.findProperty("POM_PACKAGING")
					description project.findProperty("POM_DESCRIPTION")
					url project.findProperty("POM_URL")

					scm {
						url project.findProperty("POM_SCM_URL")
						connection project.findProperty("POM_SCM_CONNECTION")
						developerConnection project.findProperty("POM_SCM_DEV_CONNECTION")
					}

					licenses {
						license {
							name project.findProperty("POM_LICENCE_NAME")
							url project.findProperty("POM_LICENCE_URL")
							distribution project.findProperty("POM_LICENCE_DIST")
						}
					}

					developers {
						developer {
							id project.findProperty("POM_DEVELOPER_ID")
							name project.findProperty("POM_DEVELOPER_NAME")
						}
					}
				}
			}
		}
	}

	signing {
		required { gradle.taskGraph.hasTask("uploadArchives") }
		sign configurations.archives
	}

	task androidJavadocs(type: Javadoc) {
		source = android.sourceSets.main.java.srcDirs
		classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
		excludes = ['**/*.kt']
		options.addStringOption('Xdoclint:none', '-quiet')
		options.addStringOption('encoding', 'UTF-8')
		options.addStringOption('charSet', 'UTF-8')
	}

	task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
		classifier = 'javadoc'
		from androidJavadocs.destinationDir
	}

	task androidSourcesJar(type: Jar) {
		classifier = 'sources'
		from android.sourceSets.main.java.sourceFiles
	}

	artifacts {
		archives androidSourcesJar
		// archives androidJavadocsJar
	}
}
